files_path[file] <-file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[file)
## RTAs
RTA_files <- list.files(files_path)
for (file in length(RTA_files)){
for (file in length(RTA_files)){
files_path[file] <-file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[file])
}
## RTAs
RTA_files <- list.files('~/GitHub/Fixed_Route_Transit_Stops/data/')
RTA_files
RTA_files
## RTAs
RTA_files <- list.files('~/GitHub/Fixed_Route_Transit_Stops/data')
## RTAs
RTA_files <- list.files('~\GitHub\Fixed_Route_Transit_Stops\data\')
## RTAs
RTA_files <- list.files('~/GitHub/Fixed_Route_Transit_Stops')
## RTAs
RTA_files <- list.files('~/GitHub/Fixed_Route_Transit_Stops/data')
for (file in length(RTA_files)){
files_path[file] <-file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[file])
}
files_path
## RTAs
RTA_files <- list.files('~/GitHub/Fixed_Route_Transit_Stops')
## RTAs
RTA_files <- list.files('~/GitHub/Fixed_Route_Transit_Stops')
## RTAs
RTA_files <- list.files('~/GitHub/Fixed_Route_Transit_Stops')
## RTAs
RTA_files <- list.files('~/GitHub/Fixed_Route_Transit_Stops/data')
RTA_files
for (file in length(RTA_files)){
files_path[file] <-file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[file])
}
files_path
RTA_files[0]
RTA_files[1]
RTA_files[6]
for (file in length(RTA_files)){
files_path[file] <-file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[file])
print(files_path)
}
brockton <- read_gtfs(files_path[1])
brockton <- read_gtfs(files_path[2])
brockton <- read_gtfs(files_path[6])
brockton <- read_gtfs(files_path[1])
for (file in length(RTA_files)){
files_path[file] <-file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[file])
print(files_path)
}
file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[2])
file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[1])
read_gtfs(file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[2]))
file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[2])
hi = file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[2])
read_gtfs(hi)
#Cape Ann
CA_file_path = file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[2])
CA <- read_gtfs(CA_file_path)
View(CA)
#Cape Ann
CA_path = file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[2])
CA <- read_gtfs(CA_path)
# Brockton Area
# local_gtfs_path_brockton <- system.file("extdata",
#                               "brockton-ma-us.zip",
#                              package = "tidytransit")
brockton_path <- file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[1])
brockton <- read_gtfs(brockton_path)
RTA_files
# Merrimack Valley
merrimack_path <- file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[5])
merrimack <- read_gtfs(merrimack_path)
# Montachusett
montachusett_path <- file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[6])
montachusett <- read_gtfs(montachusett_path)
# Greater Attleboro and Tauton Region
gatra_path <- file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[3])
gatra <- read_gtfs(gatra_path)
## RTAs
RTA_files <- list.files('~/GitHub/Fixed_Route_Transit_Stops/data')
RTA_files
# MetroWest
# Downloaded from https://transitfeeds.com/p/massdot/101 as 'gtfs', renamed as 'metrowest-ma-us.zip'
metrowest_path <- file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[6])
metrowest <- read_gtfs(metrowest_path)
# Montachusett
montachusett_path <- file.path("GitHub","Fixed_Route_Transit_Stops", "data", RTA_files[7])
montachusett <- read_gtfs(montachusett_path)
## MBTA GFTS Archive
# Day Chosen: 20220404,20220404,"Spring 2022, 2022-04-11T22:09:40+00:00, version D",https://cdn.mbtace.com/archive/20220404.zip,
mbta <- read_gtfs("https://cdn.mbtace.com/archive/20220404.zip")
## MBTA GFTS Archive
# Day Chosen: 20220404,20220404,"Spring 2022, 2022-04-11T22:09:40+00:00, version D",https://cdn.mbtace.com/archive/20220404.zip,
mbta <- read_gtfs("https://cdn.mbtace.com/archive/20220404.zip")
## Bus Stops ##
bus_stops <- function(gtfs){
bus_stops <- gtfs$routes %>%
filter(grepl('Bus',route_desc)) %>%
filter(route_desc != "Rail Replacement Bus") %>%
left_join(gtfs$trips) %>%
left_join(gtfs$stop_times) %>%
left_join(gtfs$stops) %>%
distinct(stop_id, stop_name, stop_lat, stop_lon) %>%
filter(is.na(stop_lat)== FALSE) %>%
st_as_sf(coords= c("stop_lon", "stop_lat")) %>%
st_set_crs(4326)
return(bus_stops)
}
install.packages("tidyverse")
install.packages("sf")
install.packages('tidytransit')
install.packages("magrittr")
install.packages("dplyr")
library('tidytransit')
library(magrittr)
library(sf)
library(dplyr)
bus_stops <- function(gtfs){
# Looks at the routes
bus_stops <- gtfs$routes %>%
# Finds routes with the word 'Bus' in them
filter(grepl('Bus',route_desc)) %>%
# Finds bus routes that are not rail replacement
filter(route_desc != "Rail Replacement Bus") %>%
# Joins trips, stop times, and stops to those filtered routes
left_join(gtfs$trips) %>%
left_join(gtfs$stop_times) %>%
left_join(gtfs$stops) %>%
# Selects rows that have a unique stop id, stop name, and stop coordinates
distinct(stop_id, stop_name, stop_lat, stop_lon) %>%
# Filter out NA coordinates
filter(is.na(stop_lat)== FALSE) %>%
# Set as spatial object with a coordinate system
st_as_sf(coords= c("stop_lon", "stop_lat")) %>%
st_set_crs(4326)
return(bus_stops)
}
bus_stops <- function(gtfs){
# Looks at the routes
bus_stops <- gtfs$routes %>%
# Finds routes with the word 'Bus' in them
filter(grepl('Bus',route_desc)) %>%
# Finds bus routes that are not rail replacement
filter(route_desc != "Rail Replacement Bus") %>%
# Joins trips, stop times, and stops to those filtered routes
left_join(gtfs$trips) %>%
left_join(gtfs$stop_times) %>%
left_join(gtfs$stops) %>%
# Selects rows that have a unique stop id, stop name, and stop coordinates
distinct(stop_id, stop_name, stop_lat, stop_lon) %>%
# Filter out NA coordinates
filter(is.na(stop_lat)== FALSE) %>%
# Set as spatial object with a coordinate system
st_as_sf(coords= c("stop_lon", "stop_lat")) %>%
st_set_crs(4326)
return(bus_stops)
}
bus_stops_Brockton <- bus_stops(brockton)
rlang::last_error()
rlang::last_trace()
brockton[["trips"]][["continuous_drop_off_message"]]
View(mbta)
source("~/GitHub/Fixed_Route_Transit_Stops/FIxedRouteTransitStops.R", echo=TRUE)
rm(list = ls())
install.packages('tidyverse')
install.packages('tidycensus')
library(tidycensus)
library(tidyverse)
install.packages("tidyverse")
install.packages("sf")
install.packages('tidytransit')
install.packages("sf")
install.packages('tidyverse')
install.packages('tidycensus')
library(tidycensus)
library(tidyverse)
census_api_key("6257cd611f2ce933db5dd187f4cb4411d47225fe")
census_api_key("6257cd611f2ce933db5dd187f4cb4411d47225fe", install = TRUE)
readRenviron("~/.Renviron")
age10 <- get_decennial(geography = "state",
variables = "P013001",
year = 2010)
head(age10)
age10 %>%
ggplot(aes(x = value, y = reorder(NAME, value))) +
geom_point()
rm(list = ls())
install.packages("tidyverse")
install.packages('tidycensus')
install.packages('tidytransit')
states_sp <- geojson_sp(states_json)
ls("package:geojsonio")
ls("package:geojsonio")
library(geojsonio)
states_sp <- geojson_sp(states_json)
states_json <- geojson_json(states, geometry = "polygon", group = "group")
states_json
states_sp <- geojson_sp(states_json)
## Plot the original
plot(states_sp)
states_sp <- geojson_sp(states_json)
## Plot the original
plot(states_sp)
install.packages("arulesViz")
library(arulesViz)
states_json <- geojson_json(states, geometry = "polygon", group = "group")
states_sp <- geojson_sp(states_json)
## Plot the original
plot(states_sp)
install.packages('geojsonio')
install.packages('rmapshaper')
rm(list = ls())
library(gtfsr)
install.packages("gtfsrouter")
library(gtfsr)
## BAT ----------------------------------------------------------------
# #
gtfs_path <- "./GTFS_Files/brockton-ma-us.zip"
path <- gtfs_path
returnedGTFS <- gtfsr::import_gtfs(paths = path,
local = TRUE,
quiet = TRUE)
WD_id <- c("c_1589_b_973_d_31", "c_1703_b_4246_d_31")
SA_id <- "c_1589_b_973_d_32"
SU_id <- "c_1589_b_973_d_64"
install.packages("remotes")
remotes::install_github("ropensci/gtfsr")
library(gtfsr)
library(tidyverse)
library(lubridate)
returnedGTFS <- gtfsr::import_gtfs(paths = path,
local = TRUE,
quiet = TRUE)
path < "GTFS_Files/brockton-ma-us.zip"
path <- "GTFS_Files/brockton-ma-us.zip"
returnedGTFS <- gtfsr::import_gtfs(paths = path,
local = TRUE,
quiet = TRUE)
setwd("~/GitHub/Transit_Stop_Categorization/Past Work")
returnedGTFS <- gtfsr::import_gtfs(paths = path,
local = TRUE,
quiet = TRUE)
path <- "GTFS_Files/brockton_ma_us/brockton-ma-us.zip"
returnedGTFS <- gtfsr::import_gtfs(paths = path,
local = TRUE,
quiet = TRUE)
path <- "GTFS_Files/brockton-ma-us.zip"
returnedGTFS <- gtfsr::import_gtfs(paths = path,
local = TRUE,
quiet = TRUE)
returnedGTFS <- gtfsr::import_gtfs(paths = path,
local = TRUE,
quiet = TRUE)
returnedGTFS <- gtfsr::import_gtfs(paths = path,
local = TRUE,
quiet = TRUE)
?import_gtfs()
returnedGTFS <- tidytransit::read_gtfs(path = path)
View(returnedGTFS)
returnedGTFS$tripsinschedule <- returnedGTFS$trips_df %>% filter(service_id %in% c(WD_id, SA_id, SU_id))
returnedGTFS$tripsinschedule <- returnedGTFS$trips %>% filter(service_id %in% c(WD_id, SA_id, SU_id))
View(returnedGTFS)
returnedGTFS <- import_gtfs_ql(path)
returnedGTFS$tripsinschedule <- returnedGTFS$trips %>% filter(service_id %in% c(WD_id, SA_id, SU_id))
View(returnedGTFS[["tripsinschedule"]])
returnedGTFS$tripsinschedule <- returnedGTFS$tripsinschedule %>%
mutate(DOW = case_when(service_id %in% WD_id ~ "WD",
service_id %in% SA_id ~ "SA",
service_id %in% SU_id ~ "SU",
TRUE ~ "Err")) %>%
mutate(direction_id = NA)
View(returnedGTFS[["tripsinschedule"]])
View(returnedGTFS[["stop_times"]])
# Convert GTFS times into minutes after midnight.
to_minutesaftermidnight <- function(timecolumn) {
min_aft_mid <- coalesce(
(hour(hms(timecolumn)) * 60 + minute(hms(timecolumn)) * 1 + second(hms(timecolumn)) / 60),
(hour(hm(timecolumn)) * 60 + minute(hm(timecolumn)) * 1 + second(hm(timecolumn)) / 60),
(hour(ymd_hms(timecolumn)) * 60 + minute(ymd_hms(timecolumn)) * 1 + second(ymd_hms(timecolumn)) / 60)
)
min_aft_mid <- as.double(min_aft_mid)
min_aft_mid <- ifelse(min_aft_mid < 180, 1440 + min_aft_mid, min_aft_mid)
return(min_aft_mid)
}
returnedGTFS$stop_times <- returnedGTFS$stop_times %>%
mutate(
arrival_time_mam = to_minutesaftermidnight(arrival_time)
)
View(returnedGTFS[["stop_times"]])
?coalesce()
returnedGTFS$stop_times <- returnedGTFS$stop_timesf %>%
group_by(trip_id) %>%
# Fix missing stop times.
mutate(
distancetp = if_else(is.na(arrival_time_mam), NA_real_ , shape_dist_traveled),
last_tp = zoo::na.locf(arrival_time_mam),
next_tp = zoo::na.locf(arrival_time_mam, fromLast = TRUE),
last_dis = zoo::na.locf(distancetp),
next_dis = zoo::na.locf(distancetp, fromLast = TRUE),
# This assigns times to every stop arrival based on the distance traveled between timepoints. If every stop has an arrival time,
# it shouldn't do anything.
arrival_time_mam_inter = (next_tp - last_tp) * ((shape_dist_traveled- last_dis)/(next_dis - last_dis)) + last_tp,
arrival_time_mam = if_else(is.nan(arrival_time_mam_inter), arrival_time_mam, arrival_time_mam_inter))
group_by(trip_id)
returnedGTFS$stop_times <- returnedGTFS$stop_timesf %>%
group_by(trip_id)
typeof(returnedGTFS$stop_times$trip_id)
group_by(returnedGTFS$stop_times$trip_id)
(returnedGTFS$stop_times$trip_id)
library(dplyr)
returnedGTFS$stop_times <- returnedGTFS$stop_timesf %>%
group_by(trip_id)
returnedGTFS$stop_times <- returnedGTFS$stop_times %>%
group_by(trip_id)
returnedGTFS$stop_times <- returnedGTFS$stop_times %>%
group_by(trip_id) %>%
# Fix missing stop times.
mutate(
distancetp = if_else(is.na(arrival_time_mam), NA_real_ , shape_dist_traveled),
last_tp = zoo::na.locf(arrival_time_mam),
next_tp = zoo::na.locf(arrival_time_mam, fromLast = TRUE),
last_dis = zoo::na.locf(distancetp),
next_dis = zoo::na.locf(distancetp, fromLast = TRUE),
# This assigns times to every stop arrival based on the distance traveled between timepoints. If every stop has an arrival time,
# it shouldn't do anything.
arrival_time_mam_inter = (next_tp - last_tp) * ((shape_dist_traveled- last_dis)/(next_dis - last_dis)) + last_tp,
arrival_time_mam = if_else(is.nan(arrival_time_mam_inter), arrival_time_mam, arrival_time_mam_inter))
rlang::last_error()
?NA_real_
typeof(returnedGTFS$stop_times$arrival_time_mam)
typeof(returnedGTFS$stop_times$shape_dist_traveled)
returnedGTFS$stop_times <- returnedGTFS$stop_times %>%
group_by(trip_id) %>%
# Fix missing stop times.
mutate(
distancetp = if_else(is.na(arrival_time_mam), NA_real_ , as.double(shape_dist_traveled)),
last_tp = zoo::na.locf(arrival_time_mam),
next_tp = zoo::na.locf(arrival_time_mam, fromLast = TRUE),
last_dis = zoo::na.locf(distancetp),
next_dis = zoo::na.locf(distancetp, fromLast = TRUE),
# This assigns times to every stop arrival based on the distance traveled between timepoints. If every stop has an arrival time,
# it shouldn't do anything.
arrival_time_mam_inter = (next_tp - last_tp) * ((shape_dist_traveled- last_dis)/(next_dis - last_dis)) + last_tp,
arrival_time_mam = if_else(is.nan(arrival_time_mam_inter), arrival_time_mam, arrival_time_mam_inter))
typeof(next_tp)
typeof(returnedGTFS$stop_times$next_tp)
View(returnedGTFS[["stop_times"]])
returnedGTFS$stop_times$last_tp = zoo::na.locf(returnedGTFS$stop_times$arrival_time_mam)
returnedGTFS$stop_times$last_tp
returnedGTFS$stop_times$next_tp = zoo::na.locf(returnedGTFS$stop_times$arrival_time_mam, fromLast = TRUE)
returnedGTFS$stop_times$next_tp
returnedGTFS$stop_times$last_dis = zoo::na.locf(returnedGTFS$stop_times$arrival_time_mam, fromLast = TRUE)
returnedGTFS$stop_times <- returnedGTFS$stop_times %>%
group_by(trip_id) %>%
# Fix missing stop times.
mutate(
distancetp = if_else(is.na(arrival_time_mam), NA_real_ , as.double(shape_dist_traveled)))
View(returnedGTFS[["stop_times"]])
View(returnedGTFS[["stop_times"]])
returnedGTFS$stop_times$next_dis = zoo::na.locf(returnedGTFS$stop_times$distancetp, fromLast = TRUE)
returnedGTFS$stop_times$next_dis
mutate(
distancetp = if_else(is.na(arrival_time_mam), NA_real_ , as.double(shape_dist_traveled)),
last_tp = zoo::na.locf(arrival_time_mam),
next_tp = zoo::na.locf(arrival_time_mam, fromLast = TRUE),
last_dis = zoo::na.locf(distancetp),
next_dis = zoo::na.locf(distancetp, fromLast = TRUE))
returnedGTFS$stop_times <- returnedGTFS$stop_times %>%
group_by(trip_id) %>%
# Fix missing stop times.
mutate(
distancetp = if_else(is.na(arrival_time_mam), NA_real_ , as.double(shape_dist_traveled)),
last_tp = zoo::na.locf(arrival_time_mam),
next_tp = zoo::na.locf(arrival_time_mam, fromLast = TRUE),
last_dis = zoo::na.locf(distancetp),
next_dis = zoo::na.locf(distancetp, fromLast = TRUE))
View(returnedGTFS[["stop_times"]])
typeof(returnedGTFS$stop_times$last_tp)
typeof(returnedGTFS$stop_times$last_dis)
typeof(returnedGTFS$stop_times$next_tp)
typeof(returnedGTFS$stop_times$next_dis)
typeof(returnedGTFS$stop_times$shape_dist_traveled)
returnedGTFS$stop_times <- returnedGTFS$stop_times %>%
group_by(trip_id) %>%
# Fix missing stop times.
mutate(
distancetp = if_else(is.na(arrival_time_mam), NA_real_ , as.double(shape_dist_traveled)),
last_tp = zoo::na.locf(arrival_time_mam),
next_tp = zoo::na.locf(arrival_time_mam, fromLast = TRUE),
last_dis = zoo::na.locf(distancetp),
next_dis = zoo::na.locf(distancetp, fromLast = TRUE),
# This assigns times to every stop arrival based on the distance traveled between timepoints. If every stop has an arrival time,
# it shouldn't do anything.
arrival_time_mam_inter = (next_tp - last_tp) * ((as.double(shape_dist_traveled)- last_dis)/(next_dis - last_dis)) + last_tp,
arrival_time_mam = if_else(is.nan(arrival_time_mam_inter), arrival_time_mam, arrival_time_mam_inter))
View(returnedGTFS)
View(returnedGTFS[["stop_times"]])
View(returnedGTFS[["stop_times"]])
returnedGTFS$stop_times_inSch <- returnedGTFS$stop_times %>%
inner_join(returnedGTFS$tripsinschedule %>% select(trip_id, service_id, DOW, route_id, direction_id), by = "trip_id")
View(returnedGTFS[["stop_times"]])
View(returnedGTFS)
View(returnedGTFS[["stop_times_inSch"]])
View(returnedGTFS[["tripsinschedule"]])
stop_headways <- returnedGTFS$stop_times_inSch %>%
group_by(DOW, stop_id, direction_id) %>%
arrange(stop_id, DOW, arrival_time_mam)
View(stop_headways)
stop_headways <- returnedGTFS$stop_times_inSch %>%
group_by(DOW, stop_id, direction_id) %>%
arrange(stop_id, DOW, arrival_time_mam) %>%
filter(pickup_type == 0)
View(stop_headways)
stop_headways <- returnedGTFS$stop_times_inSch %>%
group_by(DOW, stop_id, direction_id) %>%
arrange(stop_id, DOW, arrival_time_mam) %>%
filter(pickup_type == 0) %>% #select regularly scheduled pickups
mutate(
preceding_arrival = lag(arrival_time_mam)
)
stop_headways <- returnedGTFS$stop_times_inSch %>%
group_by(DOW, stop_id, direction_id) %>%
arrange(stop_id, DOW, arrival_time_mam) %>%
filter(pickup_type == 0) %>% #select regularly scheduled pickups
mutate(
preceding_arrival = lag(arrival_time_mam),
preceding_headway = arrival_time_mam - preceding_arrival))
stop_headways <- returnedGTFS$stop_times_inSch %>%
group_by(DOW, stop_id, direction_id) %>%
arrange(stop_id, DOW, arrival_time_mam) %>%
filter(pickup_type == 0) %>% #select regularly scheduled pickups
mutate(
preceding_arrival = lag(arrival_time_mam),
preceding_headway = arrival_time_mam - preceding_arrival)
stop_headways <- returnedGTFS$stop_times_inSch %>%
group_by(DOW, stop_id, direction_id) %>%
arrange(stop_id, DOW, arrival_time_mam) %>%
filter(pickup_type == 0) %>% #select regularly scheduled pickups
mutate(
preceding_arrival = lag(arrival_time_mam),
preceding_headway = arrival_time_mam - preceding_arrival) %>%
summarize(minimumArrival_mam = min(arrival_time_mam),
maximumArrival_mam = max(arrival_time_mam),
trips = n(),
averageHeadway = mean(preceding_headway, na.rm = TRUE),
longestHeadway = max(preceding_headway, na.rm = TRUE),
Percentile90_hw = quantile(preceding_headway, probs = 0.90, na.rm = TRUE))
View(stop_headways)
preceding_headway = arrival_time_mam - preceding_arrival))
stop_headways <- returnedGTFS$stop_times_inSch %>%
group_by(DOW, stop_id, direction_id) %>%
arrange(stop_id, DOW, arrival_time_mam) %>%
filter(pickup_type == 0) %>% #select regularly scheduled pickups
mutate(
preceding_arrival = lag(arrival_time_mam),
preceding_headway = arrival_time_mam - preceding_arrival)
unique(stop_headways$stop_id)
stop_headways
stop_headways <- returnedGTFS$stop_times_inSch %>%
group_by(DOW, stop_id, direction_id) %>%
arrange(stop_id, DOW, arrival_time_mam) %>%
filter(pickup_type == 0) %>% #select regularly scheduled pickups
mutate(
preceding_arrival = lag(arrival_time_mam),
preceding_headway = arrival_time_mam - preceding_arrival) %>%
summarize(minimumArrival_mam = min(arrival_time_mam),
maximumArrival_mam = max(arrival_time_mam),
trips = n(),
averageHeadway = mean(preceding_headway, na.rm = TRUE),
longestHeadway = max(preceding_headway, na.rm = TRUE),
Percentile90_hw = quantile(preceding_headway, probs = 0.90, na.rm = TRUE))
stop_headways <- returnedGTFS$stop_times_inSch %>%
group_by(DOW, stop_id, direction_id) %>%
arrange(stop_id, DOW, arrival_time_mam) %>%
filter(pickup_type == 0) %>% #select regularly scheduled pickups
mutate(
preceding_arrival = lag(arrival_time_mam),
preceding_headway = arrival_time_mam - preceding_arrival) %>%
summarize(minimumArrival_mam = min(arrival_time_mam),
maximumArrival_mam = max(arrival_time_mam),
trips = n(),
averageHeadway = mean(preceding_headway, na.rm = TRUE),
longestHeadway = max(preceding_headway, na.rm = TRUE),
Percentile90_hw = quantile(preceding_headway, probs = 0.90, na.rm = TRUE)) %>%
ungroup()
df <- stop_headways
# Get detailed information on whether each stop passes for span and/or frequency
freq_service_detailed <- function(df) {
out <- df %>%
mutate(
span_min = if_else(DOW %in% c("WD"), 7 * 60, 8 * 60),
span_max = if_else(DOW %in% c("WD"), 19 * 60, 18.5 * 60),
freq_min = if_else(DOW %in% c("WD"), 15, 20),
span_pass = minimumArrival_mam <= span_min &
maximumArrival_mam >= span_max,
freq_pass = averageHeadway <= freq_min
)
return(out)
}
detailed_output <- freq_service_detailed(stop_headways)
View(detailed_output)
detailed_output <- freq_service_detailed(stop_headways) %>% left_join(GTFS_Output$stops_df %>% select(stop_id:stop_lon), by = "stop_id")
GTFS_Output <- tidytransit::read_gtfs(path = path)
detailed_output <- freq_service_detailed(stop_headways) %>% left_join(GTFS_Output$stops %>% select(stop_id:stop_lon), by = "stop_id")
View(returnedGTFS)
View(returnedGTFS[["calendar_dates"]])
View(returnedGTFS[["stop_times"]])
View(returnedGTFS[["routes"]])
View(returnedGTFS[["trips"]])
View(returnedGTFS[["calendar_attributes"]])
